use Cobra.Compiler

use ICSharpCode.NRefactory.TypeSystem

namespace MonoDevelop.CobraBinding.TypeSystem

class Visitor inherits Cobra.Core.Visitor
	"""
	This class visits every declaration in every namespace in the
	given CobraModule.

	The region of each declaration is added to a dictionary keyed by
	the declaration itself (as an ISyntaxNode).
	"""

	var _regionMap as Dictionary<of ISyntaxNode, DomRegion>

	get regionMap from var

	cue init
		base.init
		_regionMap = Dictionary<of ISyntaxNode, DomRegion>()

	def _addRegion(node as ISyntaxNode)
		bl = node.token.lineNum
		bc = node.token.colNum
		el = node.endToken.lineNum
		ec = node.endToken.colNum
		region = DomRegion(node.token.fileName, bl, bc, el, ec)
		node.addOnValues["DomRegion"] = region
		_regionMap[node] = region
				
	
	get methodName as String is override
		return "visit"
		
	def visit(n as INode)
		"""
		This is the generic "catch-all" method for nodes that don't
		provide meaningul type information.
		"""
		pass
		/#
		if n implements INamedNode
			print "***[n.name] : [n.getType.toString]"
		#/
		
	def visit(m as CobraModule)
		"""
		This is the externally called "top-level" method.
		"""
		#print m.fileName
		.visit(m.topNameSpace)
		
	def visit(ns as NameSpace)
		#print ns.name
		_addRegion(ns)
		.dispatch(ns.declsInOrder)
		
	def visit(c as Class)
		/#
		print "\t[c.name] ([c.qualifiedName])"
		baseClass = c.baseClass
		while baseClass <> nil
			print "inherits from [baseClass.name]"
			baseClass = baseClass.baseClass
		#/
		_addRegion(c)
		.dispatch(c.declsInOrder)
		trace c.name
		trace _regionMap[c].toString

	def visit(i as Interface)
		#print "\t[i.name]"
		_addRegion(i)

	def visit(s as Struct)
		_addRegion(s)

	def visit(e as EnumDecl)
		_addRegion(e)

	def visit(e as Extension)
		_addRegion(e)

	def visit(m as Mixin)
		_addRegion(m)
		
	def visit(m as AbstractMethod)
		#print "\t\t[m.name] : [m.resultType.name]"
		_addRegion(m)
		
	def visit(v as BoxVar)
		#print "\t\t[v.name] : [v.type.name]"
		pass
		
	def visit(c as BoxConst)
		#print "\t\t[c.name] : [c.type.name]"
		pass

	def visit(p as Property)
		#print "\t\t[p.name] : [p.returnType.name]"
		pass

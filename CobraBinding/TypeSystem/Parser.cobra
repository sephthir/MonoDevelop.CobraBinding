use Cobra.Compiler

use MonoDevelop.Ide.TypeSystem
use MonoDevelop.Ide.Gui.Content
use MonoDevelop.Projects

use ICSharpCode.NRefactory
use ICSharpCode.NRefactory.TypeSystem

use MonoDevelop.CobraBinding

namespace MonoDevelop.CobraBinding.TypeSystem

class Parser inherits TypeSystemParser implements IFoldingParser
	"""
	The type system parser provides a ParsedDocument required for adding 
	information to the type system service to make the file contents available 
	for type lookup (code completion, resolving etc.).
	
	This parser also provides folds, underlines syntax errors, and has
	miscellaneous utility functions for parsing code.
	"""
	
	const TYPICAL_LINE_COUNT = 512 # 4 kB
	
	def parse(storeAst as bool, fileName as String?, content as TextReader?,
		project as MonoDevelop.Projects.Project?) as ParsedDocument
		is override
		"""
		Generates folds and parses the specified file using the Cobra Parser.
		Always stores the resultant AST in the ParsedDocument regardless of
		the value of the storeAst parameter because we aren't using NRefactory
		for completion information.
		"""
		if fileName == nil or content == nil
			# brand new file created outside the context of a Cobra project
			return DefaultParsedDocument(fileName)
		
		source = content.readToEnd ? ""
		
		/# Ignore type system parse requests for files that aren't open.  This is for
		performance reasons.  If we were serializing and saving type system information,
		maybe we wouldn't do this.  Instead, we just return folds for these requests. #/
		workbench = MonoDevelop.Ide.IdeApp.workbench
		if workbench == nil, return .parse(fileName, source)
		if workbench.getDocument(fileName) == nil, return .parse(fileName, source)
		
		sourceMap = Dictionary<of String, String>()
		sourceMap[fileName] = source
		refs = List<of String>()

		if project <> nil
			proj = project to DotNetProject #TODO to CobraProject

			# we need to include the paths to any referenced assemblies
			refs.addRange(proj.getReferencedAssemblies(ConfigurationSelector.default))
			
			# to generate a full AST, we need all the Cobra source files in this project
			for projFile in proj.files
				
				if projFile.buildAction <> BuildAction.compile, continue
				
				path = projFile.filePath.toString
				if path == fileName _
				or not path.endsWith(CobraLanguageBinding.sourceFileExtension), continue
				
				sourceMap[path] = StreamReader(path).readToEnd ? ""

		parsedDoc = CompilerManager.instance.parseAndBind(sourceMap, refs, fileName to !)
		_addFolds(parsedDoc)
		return parsedDoc

	def parse(fileName as String?, content as String?) as ParsedDocument
		"""
		implements IFoldingParser.parse

		Parse the specified file only to generate folds.  Does not generate an AST.
		"""
		parsedDoc = ParsedCobraDocument(fileName, content)
		_addFolds(parsedDoc)
		return parsedDoc
		
	def _addFolds(doc as ParsedCobraDocument)
		"""
		Adds folding regions to the given document.
		"""
		reader = StringReader(doc.content)
		folds = List<of FoldingRegion>()
		_addFolds(_getLineInformation(reader), folds)
		doc.add(folds)
	
	def _getLineInformation(reader as StringReader) as List<of LineInformation>
		"""
		Create a list of LineInformation objects that make it easier to
		create folding regions.
		"""
		lines = List<of String>(.TYPICAL_LINE_COUNT)
		
		line = reader.readLine
		while line <> nil
			lines.add(line)
			line = reader.readLine
			
		if lines.count > 0
			return _getLineInformation(lines)
			
		return List<of LineInformation>()
		
	def _getLineInformation(lines as List<of String>) as List<of LineInformation>
		"""
		Create a list of LineInformation objects that make it easier to 
		create folding regions.
		"""
		require
			lines.count > 0
		ensure
			result.count == lines.count
		test
			source = List<of String>()
			source.add("use Foo.Namespace") # line 0
			source.add("")
			source.add("namespace Bar.Namespace")
			source.add("\tclass SomeClass")
			source.add("\t\t'''")
			source.add("\t\tDocstring text") # line 5
			source.add("\t\t'''")
			source.add("")
			source.add("\t\tdef aMethod")
			source.add("/#")
			source.add("\ta comment") # line 10
			source.add("\t\t#/")
			source.add("\t\t\t")
			source.add("\t\t\tprint 'hello world!'")
			source.add("")
			source.add("")
			
			parser = Parser()
			infoList = parser._getLineInformation(source)
			
			assert infoList[0].opensComment == false
			assert infoList[0].closesComment == false
			assert infoList[0].opensDocString == false
			assert infoList[0].closesDocString == false
			assert infoList[0].isBlank == false
			
			assert infoList[1].opensComment == false
			assert infoList[1].closesComment == false
			assert infoList[1].opensDocString == false
			assert infoList[1].closesDocString == false
			assert infoList[1].isBlank == true #
			
			assert infoList[4].opensComment == false
			assert infoList[4].closesComment == false
			assert infoList[4].opensDocString == true #
			assert infoList[4].closesDocString == false
			assert infoList[4].isBlank == false
			
			assert infoList[5].opensComment == false
			assert infoList[5].closesComment == false
			assert infoList[5].opensDocString == false
			assert infoList[5].closesDocString == false
			assert infoList[5].isBlank == false
				
			assert infoList[6].opensComment == false
			assert infoList[6].closesComment == false
			assert infoList[6].opensDocString == false
			assert infoList[6].closesDocString == true #
			assert infoList[6].isBlank == false
			
			assert infoList[9].opensComment == true #
			assert infoList[9].closesComment == false
			assert infoList[9].opensDocString == false
			assert infoList[9].closesDocString == false
			assert infoList[9].isBlank == false
			
			assert infoList[10].opensComment == false
			assert infoList[10].closesComment == false
			assert infoList[10].opensDocString == false
			assert infoList[10].closesDocString == false
			assert infoList[10].isBlank == false
			
			assert infoList[11].opensComment == false
			assert infoList[11].closesComment == true #
			assert infoList[11].opensDocString == false
			assert infoList[11].closesDocString == false
			assert infoList[11].isBlank == false
			
			assert infoList[12].opensComment == false
			assert infoList[12].closesComment == false
			assert infoList[12].opensDocString == false
			assert infoList[12].closesDocString == false
			assert infoList[12].isBlank == true #
		body
			info as LineInformation? = nil
			inComment = false
			inDocString = false
			docStringTag as String? = nil
			infoList = List<of LineInformation>(lines.count)
			
			for line in lines
				
				info = LineInformation(line, inComment, inDocString, docStringTag, info)
				
				if not inComment and info.opensComment
					inComment = true
				else if inComment and info.closesComment
					inComment = false
				
				if not inDocString and info.opensDocString
					inDocString = true
					docStringTag = info.docStringTag
				else if inDocString and info.closesDocString
					inDocString = false
					docStringTag = nil
			
				infoList.add(info)
				
			return infoList

	sig ClosesDelimitedBlock(info as LineInformation) as bool

	def _addFolds(infoList as List<of LineInformation>, folds as List<of FoldingRegion>)
		"""
		Adds folds to the given list of folds using the given list of line information.
		"""
		test
			source = List<of String>()
			source.add("use Foo.Namespace")
			source.add("")
			source.add("namespace Bar.Namespace")
			source.add("\tclass SomeClass")
			source.add("\t\t'''")
			source.add("\t\tDocstring text")
			source.add("\t\t'''")
			source.add("")
			source.add("\t\tdef aMethod")
			source.add("/#")
			source.add("\ta comment")
			source.add("\t\t#/")
			source.add("\t\t\t")
			source.add("\t\t\tprint 'hello world!'")
			source.add("")
			source.add("")
			
			parser = Parser()
			infoList = parser._getLineInformation(source)
			folds = List<of FoldingRegion>()
			parser._addFolds(infoList, folds)
			
			assert folds.count == 5
			
			commentBlockCount = 0
			for f in folds
				if f.type == FoldType.Comment
					commentBlockCount += 1
				else
					assert f.region.endLine == 14
					
			assert commentBlockCount == 2

		test docStrings
			source = List<of String>()
			source.add("'''")
			source.add("Program docstring")
			source.add("'''")
			source.add("interface SomeInterface")
			source.add("\t'''")
			source.add("\tDocstring text for interface")
			source.add("\t'''")
			source.add("")
			source.add("\tget aProperty")
			source.add("\t\t'''")
			source.add("\t\tProperty Docstring")
			source.add("\t\t'''")
			
			parser = Parser()
			infoList = parser._getLineInformation(source)
			folds = List<of FoldingRegion>()
			parser._addFolds(infoList, folds)
			
			assert folds.count == 5
			
			commentBlockCount = 0
			for f in folds
				if f.type == FoldType.Comment
					commentBlockCount += 1
					
			assert commentBlockCount == 3
		body
			if infoList.count < 2
				# not enough lines to create a fold
				return
			
			commentCloser as ClosesDelimitedBlock = do(i as LineInformation)
				return i.opensComment
			
			docStringCloser as ClosesDelimitedBlock = do(i as LineInformation)
				return i.opensDocString
			
			lineNumber = infoList.count
			curr as LineInformation? = infoList[lineNumber - 1]
			
			endStack = Stack<of TextLocation>()
			levelStack = Stack<of int>()
			
			# go through the list backwards creating folds as we go
			while curr <> nil
			
				closer as ClosesDelimitedBlock? = nil
				
				# skip blank lines
				while curr.isBlank
					curr = curr.previous
					if curr == nil
						return
					lineNumber -= 1
				
				# handle comment blocks and doc strings
				if curr.closesComment
					closer = commentCloser
				else if curr.closesDocString
					closer = docStringCloser
				
				if closer <> nil
					endLocation = TextLocation(lineNumber, curr.line.length + 1)
					
					if closer == docStringCloser
					
						level = .getIndentLevel(curr.line)
						if level > 0
							if levelStack.count == 0 or (levelStack.count > 0 and levelStack.peek < level)
								/# We need to make sure the doc string
								closes with its containing block #/
								levelStack.push(level)
								endStack.push(endLocation)
					
					# we won't have a line that closes a delimited block without one that opens it
					blockText = curr to !
					while not closer(blockText)
						blockText = blockText.previous to !
						lineNumber -= 1
					
					curr = blockText
					startLocation = TextLocation(lineNumber, curr.line.length + 2)
					folds.add(FoldingRegion(DomRegion(startLocation, endLocation), FoldType.Comment))
					curr = curr.previous
					lineNumber -= 1
					continue
				
				# handle indent blocks (ignore commented lines)
				trimmedStart = curr.line.trimStart
				if not trimmedStart.startsWith("#")
					
					level = .getIndentLevel(curr.line)
					
					# should we close any regions?
					while levelStack.count > 0 and levelStack.peek > level
						levelStack.pop
						endLocation = endStack.pop
						startLocation = TextLocation(lineNumber, curr.line.length + 2)
						region = DomRegion(startLocation, endLocation)
						fold = FoldingRegion(region, FoldType.Undefined)
						fold.isFoldedByDefault = trimmedStart.startsWith("test")
						folds.add(fold)
					
					# should we open any regions?
					if levelStack.count == 0
						first = 0
					else if level > levelStack.peek
						first = levelStack.peek
					else
						# makes the following loop do nothing
						first = level + 2
					
					for l in first : level + 1
						levelStack.push(l)
						endStack.push(TextLocation(lineNumber, curr.line.length + 1))
					
				curr = curr.previous
				lineNumber -= 1

	shared
		def getIndentLevel(line as String) as int
			"""
			Returns the number of indents for the given line.
			"""
			ensure
				result >= 0
			test
				assert .getIndentLevel("print 'hello'") == 0
				assert .getIndentLevel("\tprint 'hello'") == 1
				assert .getIndentLevel("\t\tprint 'hello'") == 2
			body
				return line.length - line.trimStart.length
		
		var _declStarters = @[
			"def ",
			"var ",
			"get ",
			"set ",
			"pro ",
			"class ",
			"interface ",
			"struct ",
		]
		
		def isStartingDecl(line as String) as bool
			"""
			Returns true if the line is an unfinished declaration such
			as 'def foo' or 'var _bar' but not 'def foo ' and not 'var _bar is'
			"""
			test
				assert Parser.isStartingDecl("class ")
				assert Parser.isStartingDecl("\tdef ")
				assert Parser.isStartingDecl("\tdef foo(")
				assert Parser.isStartingDecl("\t\tdef foo")
				assert Parser.isStartingDecl("    def bar")
				assert not Parser.isStartingDecl("use ")
				
				assert not Parser.isStartingDecl("class Bar ")
				assert not Parser.isStartingDecl("\t\tdef foo ")
				assert not Parser.isStartingDecl("    def foo is")
				assert not Parser.isStartingDecl("use MonoDevelop.Cobr")
			body
				trimmed = line.trimStart
				if trimmed.indexOf(c' ') == trimmed.lastIndexOf(c' ')
					# only one or zero spaces in the trimmed line of text, might be declaring something
					for starter in _declStarters
						if trimmed.startsWith(starter)
							return true
				
				return false
		
		# matches a valid identifier or the string "[]"
		var rexIdentifier = RegularExpressions.Regex( _
			r'[_a-zA-z][_a-zA-z0-9]*|\[\]', _
			RegularExpressions.RegexOptions.Compiled _
		)
	
		def getIdsFromText(text as String) as List<of String>
			"""
			Given a line of text, returns a list of trailing identifiers.

			For example, given "foo = SomeSharedClass.someProp.", then this
			method would return ['SomeSharedClass', 'someProp'].
			"""
			test basics
				sampleText = "foo = "
				ids = .getIdsFromText(sampleText)
				assert ids.count == 0
				
				sampleText = "foo = SomeSharedClass.someProp."
				ids = .getIdsFromText(sampleText)
				assert ids.count == 2
				assert ids[0] == "SomeSharedClass"
				assert ids[1] == "someProp"
				
				sampleText = "foo = .someProp."
				ids = .getIdsFromText(sampleText)
				assert ids.count == 1
				assert ids[0] == "someProp"
			test openParenthesis
				sampleText = "foo = .someMethod("
				ids = .getIdsFromText(sampleText)
				assert ids.count == 0
				
				sampleText = "foo = .someMethod(aParam"
				ids = .getIdsFromText(sampleText)
				assert ids.count == 1
				assert ids[0] == "aParam"
				
				sampleText = "foo = .someMethod(aParam, anotherParam"
				ids = .getIdsFromText(sampleText)
				assert ids.count == 1
				assert ids[0] == "anotherParam"
				
				sampleText = "foo = .someMethod(aParam.someOtherMethod(anotherParam"
				ids = .getIdsFromText(sampleText)
				assert ids.count == 1
				assert ids[0] == "anotherParam"
			test closedParenthesis
				sampleText = "foo = .someMethod(aParam)."
				ids = .getIdsFromText(sampleText)
				assert ids.count == 1
				assert ids[0] == "someMethod"
				
				sampleText = "foo = .someMethod(aParam).toString"
				ids = .getIdsFromText(sampleText)
				assert ids.count == 2
				assert ids[0] == "someMethod"
				assert ids[1] == "toString"
				
				sampleText = "foo = .someMethod(aParam).toString.replace(stringVar"
				ids = .getIdsFromText(sampleText)
				assert ids.count == 1
				assert ids[0] == "stringVar"
				
				sampleText = "foo = .someMethod(aParam).toString.replace(stringVar, anotherStringVar)"
				ids = .getIdsFromText(sampleText)
				assert ids.count == 3
				assert ids[0] == "someMethod"
				assert ids[1] == "toString"
				assert ids[2] == "replace"
			test openBracket
				sampleText = ns'foo = someArray['
				ids = .getIdsFromText(sampleText)
				assert ids.count == 0
				
				sampleText = ns'foo = someArray[index'
				ids = .getIdsFromText(sampleText)
				assert ids.count == 1
				assert ids[0] == "index"
				
				sampleText = ns'foo = "hello [bar'
				ids = .getIdsFromText(sampleText)
				assert ids.count == 1
				assert ids[0] == "bar"
			test closedBracket
				sampleText = ns'foo = someArray[index].'
				ids = .getIdsFromText(sampleText)
				assert ids.count == 2
				assert ids[0] == "someArray"
				assert ids[1] == ns'[]'
				
				sampleText = ns'foo = someArray[index].someProp'
				ids = .getIdsFromText(sampleText)
				assert ids.count == 3
				assert ids[0] == "someArray"
				assert ids[1] == ns'[]'
				assert ids[2] == "someProp"
				
				sampleText = ns'if lineText[col].isLetter or lineText[col] == c"_" or lineText[col]'
				ids = .getIdsFromText(sampleText)
				assert ids.count == 2
				assert ids[0] == "lineText"
				assert ids[1] == ns'[]'
			test parenthesisAndBracks
				sampleText = ns'foo = someArray[index].someMethod(aParam).aProp[bar'
				ids = .getIdsFromText(sampleText)
				assert ids.count == 1
				assert ids[0] == "bar"
				
				sampleText = ns'foo = someArray[index].someMethod(aParam).aProp[bar].'
				ids = .getIdsFromText(sampleText)
				assert ids.count == 5
				assert ids[0] == "someArray"
				assert ids[1] == ns'[]'
				assert ids[2] == "someMethod"
				assert ids[3] == "aProp"
				assert ids[4] == ns'[]'
			body
				text = text.trim
				if text.endsWith('(') or text.endsWith(ns'[')
					# we are in the context of unmatched pair of parenthesis or brackets
					# ignore all preceeding text
					return List<of String>()
				
				startIndex = 0
				openIndex = text.indexOf(c'(', startIndex)
				while openIndex > 0 and openIndex < text.length
					closeIndex = text.indexOf(c')', openIndex + 1)
					if closeIndex >= 0
						# we have a matching pair of parenthesis, remove them and the text they surround
						removeCount = closeIndex - openIndex + 1
						text = text.remove(openIndex, removeCount)
						startIndex = openIndex
					else if openIndex < text.length - 1
						# we have an unmatched opening parenthesis with some trailing text, remove the preceeding text
						text = text.substring(openIndex + 1)
						startIndex = 0
					openIndex = text.indexOf(c'(', startIndex)
				
				startIndex = 0
				openIndex = text.indexOf(c'[', startIndex)
				while openIndex > 0 and openIndex < text.length
					closeIndex = text.indexOf(c']', openIndex + 1)
					if closeIndex >= 0
						# we have a matching pair of brackets, replace them and their contents with ".[]."
						# that way, it will resolve to the indexer member of the parent correctly
						removeCount = closeIndex - openIndex + 1
						textToReplace = text.substring(openIndex, removeCount)
						if textToReplace == ns'[]'
							# this can happen if we use the same index variable multiple times in a line
							# don't do a replacement in this case otherwise we'll enter an infinite loop
							startIndex = closeIndex + 1
						else
							text = text.replace(textToReplace, ns'.[].')
							startIndex = openIndex + 4
					else if openIndex < text.length - 1
						# we have an unmatched opening bracket with some trailing text, remove the preceeding text
						text = text.substring(openIndex + 1)
						startIndex = 0
					openIndex = text.indexOf(c'[', startIndex)
				
				# split the text by whitespace
				pieces = text.split
				lastPiece = pieces[pieces.length - 1]
				ids = List<of String>()
				
				match = .rexIdentifier.match(lastPiece)
				while match.success
					if match.value.length > 0
						ids.add(match.value)
					match = match.nextMatch to !

				return ids
		
		
		def isInsideUnfinishedString(text as String) as bool
			"""
			Returns true if 'text' ends inside a string literal such as
			
			print "Hello, wo
			
			or
			
			print "The value is [someVar
			"""
			test basics
				assert .isInsideUnfinishedString("s = 'Hello, wo")
				assert .isInsideUnfinishedString('s = "Hello, wo')
				
				assert not .isInsideUnfinishedString("s = 'Hello, world!'")
				assert not .isInsideUnfinishedString('s = "Hello, world!"')
				assert not .isInsideUnfinishedString("print s")
			test expressionBrackets
				assert .isInsideUnfinishedString(ns's = "a [b] c')
				assert .isInsideUnfinishedString(ns's = "a [b')
				assert .isInsideUnfinishedString(ns's = ns"a [b')
				
				assert not .isInsideUnfinishedString(ns's = "a [b] c"')
				assert not .isInsideUnfinishedString(ns's = "a [b]"')
				assert not .isInsideUnfinishedString(ns's = ns"a [b]"')
			body
				return .isInsideString(text, true)
		
		def isInsideString(text as String, exprBracketsReturn as bool) as bool
			"""
			Returns true if 'text' ends inside a string literal such as
			
			print "Hello, wo
			
			If we are inside [expression brackets], then the value of the
			'exprBracketsReturn' parameter will be returned.
			"""
			test
				assert .isInsideString(ns's = "a [b] c', true)
				assert .isInsideString(ns's = "a [b] c', false)
				
				assert .isInsideString(ns's = "a [b', true)
				assert not .isInsideString(ns's = "a [b', false)
				
				assert .isInsideString(ns's = ns"a [b', true)
				assert .isInsideString(ns's = ns"a [b', false)
				
				assert not .isInsideString(ns's = "a [b] c"', true)
				assert not .isInsideString(ns's = "a [b] c"', false)
				
				assert not .isInsideString(ns's = "a [b]"', true)
				assert not .isInsideString(ns's = "a [b]"', false)
				
				assert not .isInsideString(ns's = ns"a [b]"', true)
				assert not .isInsideString(ns's = ns"a [b]"', false)
			body
				tag as char? = nil
				quotes = @[c"'", c'"']
				inString = false
				inNonSubString = false
				inSubExpr = false
				
				i = 0
				while i < text.length
					character = text[i]
					
					if tag == nil
						if character in quotes
							# string opening tag
							tag = character
							inString = true
						else if character == c'n' and i + 2 < text.length
							if text[i+1] == c's' and text[i+2] in quotes
								# non-substituted string opening tag
								tag = text[i+2]
								inString = true
								inNonSubString = true
								i += 2
					else
						if character == tag
							# string closing tag
							inString = false
							inNonSubString = false
							tag = nil
						else if not inNonSubString
							if character == c'['
								inSubExpr = true
							else if inSubExpr and character == c']'
								inSubExpr = false
					i += 1
						
				if inNonSubString
					return true
				else if inSubExpr
					return exprBracketsReturn
				else
					return inString